This patch fixes a bug by removing @css parameter from the three
migration methods, ->can_attach, ->cancel_attach() and ->attach() and
updating cgroup_taskset iteration helpers also return the destination
css in addition to the task being migrated.

See also: https://github.com/torvalds/linux/commit/1f7dd3e5a6e4f093017fff12232572ee1aa4639b

Signed-off-by: Philip MÃ¼ller <philm@manjaro.org>
---
diff -Npur linux-4.4-rc4/block/bfq-cgroup.c linux-4.4-rc5/block/bfq-cgroup.c
--- linux-4.4-rc4/block/bfq-cgroup.c	2015-12-14 08:35:37.762300000 +0100
+++ linux-4.4-rc5/block/bfq-cgroup.c	2015-12-14 10:36:06.761137723 +0100
@@ -768,14 +768,14 @@ static struct cgroup_subsys_state *bfqio
  * behavior is that a group containing a task that forked using CLONE_IO
  * will not be destroyed until the tasks sharing the ioc die.
  */
-static int bfqio_can_attach(struct cgroup_subsys_state *css,
-			    struct cgroup_taskset *tset)
+static int bfqio_can_attach(struct cgroup_taskset *tset)
 {
 	struct task_struct *task;
+	struct cgroup_subsys_state *dst_css;
 	struct io_context *ioc;
 	int ret = 0;
 
-	cgroup_taskset_for_each(task, tset) {
+	cgroup_taskset_for_each(task, dst_css, tset) {
 		/*
 		 * task_lock() is needed to avoid races with
 		 * exit_io_context()
@@ -799,10 +799,10 @@ static int bfqio_can_attach(struct cgrou
 	return ret;
 }
 
-static void bfqio_attach(struct cgroup_subsys_state *css,
-			 struct cgroup_taskset *tset)
+static void bfqio_attach(struct cgroup_taskset *tset)
 {
 	struct task_struct *task;
+	struct cgroup_subsys_state *dst_css;
 	struct io_context *ioc;
 	struct io_cq *icq;
 
@@ -810,7 +810,7 @@ static void bfqio_attach(struct cgroup_s
 	 * IMPORTANT NOTE: The move of more than one process at a time to a
 	 * new group has not yet been tested.
 	 */
-	cgroup_taskset_for_each(task, tset) {
+	cgroup_taskset_for_each(task, dst_css, tset) {
 		ioc = get_task_io_context(task, GFP_ATOMIC, NUMA_NO_NODE);
 		if (ioc) {
 			/*
@@ -822,7 +822,7 @@ static void bfqio_attach(struct cgroup_s
 					icq->q->elevator->type->elevator_name,
 					"bfq", ELV_NAME_MAX))
 					bfq_bic_change_cgroup(icq_to_bic(icq),
-							      css);
+							      dst_css);
 			rcu_read_unlock();
 			put_io_context(ioc);
 		}
